{% set name = "sshtunnel" %}
{% set version = "0.1.4" %}
{% set data = load_setup_py_data() %}
package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz
  sha256: f29ae41a1bd3afa64e9a31029bece2966e4be9a9641e8262372741e691c40d76

build:
  noarch: python
  entry_points:
    - sshtunnel = sshtunnel:_cli_main
  number: 0
  script: "{{ PYTHON }} -m pip install . --no-deps --ignore-installed --verbose"

requirements:
  host:
    - python
    - pip >=18.1
    - setuptools >=34.0.0
    - paramiko >=1.15.2
  run:
    - {{ pin_compatible('paramiko') }}

test:
  imports:
    - sshtunnel

about:
  home: {{ data.get('url') }}
  license: {{ data.get('license') }}
  license_family: MIT
  summary: {{ data.get('description') }}
  description: |
    sshtunnel Pure python SSH tunnels
    -------------
          Author - [Pahaz Blinov](https://github.com/pahaz)
            Repo - [sshtunnel](https://github.com/pahaz/sshtunnel/)
    Requirements - [paramiko](http://www.paramiko.org/)

    Inspired by [bgtunnel](https://github.com/jmagnusson/bgtunnel), but it doesn't work on
    Windows.

    See: [demos/forward.py](https://github.com/paramiko/paramiko/blob/master/demos/forward.py)

    Installation
    -------------

    For installing from source, clone the [repo](https://github.com/pahaz/sshtunnel) and run:
    `python setup.py install`

    Testing the package
    -------------------

    In order to run the tests you first need [tox](https://testrun.org/tox/latest/) and run:
    `python setup.py test`

    Usage scenarios
    -------------------

    One of the typical scenarios where `sshtunnel` is helpful is depicted in the
    figure below. User may need to connect a port of a remote server (i.e. 8080)
    where only SSH port (usually port 22) is reachable.

    <code style=display:block;white-space:pre-wrap>
        ----------------------------------------------------------------------

                                    |
        -------------+              |    +----------+
            LOCAL    |              |    |  REMOTE  | :22 SSH
            CLIENT   | <== SSH ========> |  SERVER  | :8080 web service
        -------------+              |    +----------+
                                    |
                                 FIREWALL (only port 22 is open)

        ----------------------------------------------------------------------
    </code>
    **Fig1**: How to connect to a service blocked by a firewall through SSH tunnel.


    If allowed by the SSH server, it is also possible to reach a private server
    (from the perspective of `REMOTE SERVER`) not directly visible from the
    outside (`LOCAL CLIENT`'s perspective).

    <code style=display:block;white-space:pre-wrap>
        ----------------------------------------------------------------------

                                    |
        -------------+              |    +----------+               +---------
            LOCAL    |              |    |  REMOTE  |               | PRIVATE
            CLIENT   | <== SSH ========> |  SERVER  | <== local ==> | SERVER
        -------------+              |    +----------+               +---------
                                    |
                                 FIREWALL (only port 443 is open)

        ----------------------------------------------------------------------
    </code>
    **Fig2**: How to connect to `PRIVATE SERVER` through SSH tunnel.

    Usage examples
    ---------

    API allows either initializing the tunnel and starting it or using a `with`
    context, which will take care of starting **and stopping** the tunnel:

    Example 1
    ---------

    Code corresponding to **Fig1** above follows, given remote server's address is
    `pahaz.urfuclub.ru`, password authentication and randomly assigned local bind
    port.

    <code style=display:block;white-space:pre-wrap>

        from sshtunnel import SSHTunnelForwarder

        server = SSHTunnelForwarder(
            'pahaz.urfuclub.ru',
            ssh_username="pahaz",
            ssh_password="secret",
            remote_bind_address=('127.0.0.1', 8080)
        )

        server.start()

        print(server.local_bind_port)  # show assigned local port
        # work with `SECRET SERVICE` through `server.local_bind_port`.

        server.stop()
    </code>

    Example 2
    ---------

    Example of a port forwarding to a private server not directly reachable,
    assuming password protected pkey authentication, remote server's SSH service is
    listening on port 443 and that port is open in the firewall (**Fig2**):

    <code style=display:block;white-space:pre-wrap>

        import paramiko
        from sshtunnel import SSHTunnelForwarder

        with SSHTunnelForwarder(
            (REMOTE_SERVER_IP, 443),
            ssh_username="",
            ssh_pkey="/var/ssh/rsa_key",
            ssh_private_key_password="secret",
            remote_bind_address=(PRIVATE_SERVER_IP, 22),
            local_bind_address=('0.0.0.0', 10022)
        ) as tunnel:
            client = paramiko.SSHClient()
            client.load_system_host_keys()
            client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            client.connect('127.0.0.1', 10022)
            # do some operations with client session
            client.close()

        print('FINISH!')
    </code>

    Example 3
    ---------

    Example of a port forwarding for the Vagrant MySQL local port:

    <code style=display:block;white-space:pre-wrap>

        from sshtunnel import SSHTunnelForwarder
        from time import sleep

        with SSHTunnelForwarder(
            ('localhost', 2222),
            ssh_username="vagrant",
            ssh_password="vagrant",
            remote_bind_address=('127.0.0.1', 3306)
        ) as server:

            print(server.local_bind_port)
            while True:
                # press Ctrl-C for stopping
                sleep(1)

        print('FINISH!')
    </code>

    Or simply using the CLI:

    `python -m sshtunnel -U vagrant -P vagrant -L :3306 -R 127.0.0.1:3306 -p 2222 localhost`

    CLI usage
    -------------------------

    <code style=display:block;white-space:pre-wrap>

        $ sshtunnel --help
        usage: sshtunnel -h -U SSH_USERNAME -p SSH_PORT -P SSH_PASSWORD -R
                         IP:PORT IP:PORT  -L IP:PORT IP:PORT
                         -k SSH_HOST_KEY -K KEY_FILE -S KEY_PASSWORD -t -v
                         -V -x IP:PORT -c SSH_CONFIG_FILE -z -n -d FOLDER FOLDER
                         ssh_address

        Pure python ssh tunnel utils
        Version 0.1.4

        positional arguments:
          ssh_address           SSH server IP address (GW for SSH tunnels)
                                set with "-- ssh_address" if immediately after -R or -L

        optional arguments:
          -h, --help            show this help message and exit
          -U SSH_USERNAME, --username SSH_USERNAME
                                SSH server account username
          -p SSH_PORT, --server_port SSH_PORT
                                SSH server TCP port (default: 22)
          -P SSH_PASSWORD, --password SSH_PASSWORD
                                SSH server account password
          -R IP:PORT IP:PORT , --remote_bind_address IP:PORT IP:PORT
                                Remote bind address sequence: ip_1:port_1 ip_2:port_2 ip_n:port_n
                                Equivalent to ssh -Lxxxx:IP_ADDRESS:PORT
                                If port is omitted, defaults to 22.
                                Example: -R 10.10.10.10: 10.10.10.10:5900
          -L IP:PORT IP:PORT , --local_bind_address IP:PORT IP:PORT
                                Local bind address sequence: ip_1:port_1 ip_2:port_2 ip_n:port_n
                                Elements may also be valid UNIX socket domains:
                                /tmp/foo.sock /tmp/bar.sock /tmp/baz.sock
                                Equivalent to ssh -LPORT:xxxxxxxxx:xxxx, being the local IP address optional.
                                By default it will listen in all interfaces (0.0.0.0) and choose a random port.
                                Example: -L :40000
          -k SSH_HOST_KEY, --ssh_host_key SSH_HOST_KEY
                                Gateway's host key
          -K KEY_FILE, --private_key_file KEY_FILE
                                RSA/DSS/ECDSA private key file
          -S KEY_PASSWORD, --private_key_password KEY_PASSWORD
                                RSA/DSS/ECDSA private key password
          -t, --threaded        Allow concurrent connections to each tunnel
          -v, --verbose         Increase output verbosity (default: ERROR)
          -V, --version         Show version number and quit
          -x IP:PORT, --proxy IP:PORT
                                IP and port of SSH proxy to destination
          -c SSH_CONFIG_FILE, --config SSH_CONFIG_FILE
                                SSH configuration file, defaults to ~/.ssh/config
          -z, --compress        Request server for compression over SSH transport
          -n, --noagent         Disable looking for keys from an SSH agent
          -d FOLDER FOLDER , --host_pkey_directories FOLDER FOLDER
                                List of directories where SSH pkeys (in the format 'id_*') may be found
    </code>

  dev_url: https://github.com/pahaz/sshtunnel

extra:
  recipe-maintainers:
    - basnijholt
    - pahaz
    - fernandezcuesta
    - BrentDorsey
